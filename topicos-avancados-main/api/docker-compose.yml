services:
  # Banco de dados PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: topicos_avancados_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: topicos_avancados
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
    ports:
      - "5434:5432"  # Mudança: de 5432:5432 para 5433:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d topicos_avancados"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicação Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: topicos_avancados_app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Configurações do banco de dados
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/topicos_avancados
      SPRING_DATASOURCE_USERNAME: app_user
      SPRING_DATASOURCE_PASSWORD: app_password
      
      # Configurações do JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "false"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      
      # Configurações gerais
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      
      # Configurações de logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_EXAMPLE: DEBUG
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: topicos_avancados_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin para administração do banco (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: topicos_avancados_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - database
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  app-network:
    driver: bridge